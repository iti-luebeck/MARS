MaterialDef TreeBase {

    MaterialParameters {
        
        //Fading parameters (don't set these manually).
        Float FadeEnd
        Float FadeRange
        Boolean FadeEnabled

        // Compute vertex lighting in the shader
        // For better performance
        Boolean VertexLighting

        // Use the provided ambient, diffuse, and specular colors
        Boolean UseMaterialColors

        // Ambient color
        Color Ambient (MaterialAmbient)

        // Diffuse color
        Color Diffuse (MaterialDiffuse)

        // Specular color
        Color Specular (MaterialSpecular)

        // Specular power/shininess
        Float Shininess (MaterialShininess) : 1

        // Diffuse map
        Texture2D ColorMap

        // Normal map
        Texture2D NormalMap

        // Parallax/height map
        Texture2D ParallaxMap

        Texture2D AlphaNoiseMap

        //Sets the relief height for parallax mapping
        Float ParallaxHeight : 0.05

        //When texture alpha is below this value, the pixel is discarded
        Float AlphaDiscardThreshold : 0.3

        //Used internally.
        Int NumLights


        //shadows
        Int FilterMode
        Boolean HardwareShadows

        Texture2D ShadowMap0
        Texture2D ShadowMap1
        Texture2D ShadowMap2
        Texture2D ShadowMap3
        
        Float ShadowIntensity
        Vector4 Splits

        Matrix4 LightViewProjectionMatrix0
        Matrix4 LightViewProjectionMatrix1
        Matrix4 LightViewProjectionMatrix2
        Matrix4 LightViewProjectionMatrix3

        Float PCFEdge
    }

    Technique {
        LightMode SinglePass

        VertexShader GLSL100:   forester/assets/shaders/trees/Tree.vert
        FragmentShader GLSL100: forester/assets/shaders/trees/Tree.frag

        WorldParameters {
            WorldViewProjectionMatrix
            WorldViewMatrix
            WorldMatrix
            ViewMatrix
            NormalMatrix
            CameraPosition
        }

        Defines {
            NUM_LIGHTS : NumLights

            VERTEX_LIGHTING : VertexLighting
            MATERIAL_COLORS : UseMaterialColors

            AMBIENT: Ambient
            DIFFUSE : Diffuse
            SPECULAR : Specular
            COLORMAP : ColorMap
            NORMALMAP : NormalMap
            PARALLAXMAP : ParallaxMap
        }
    }

    Technique PreShadow {

        VertexShader GLSL100 :   forester/assets/shaders/trees/TreePreShadowPSSM.vert
        FragmentShader GLSL100 : forester/assets/shaders/trees/TreePreShadowPSSM.frag

        WorldParameters {
            WorldViewProjectionMatrix
            WorldViewMatrix
        }

        Defines {
            COLOR_MAP : ColorMap
            DISCARD_ALPHA : AlphaDiscardThreshold
        }

        RenderState {
            FaceCull Off
            DepthTest On
            DepthWrite On
            PolyOffset 5 0
            ColorWrite Off
        }

    }


    Technique PostShadow15{
        VertexShader GLSL150:   forester/assets/shaders/trees/TreePostShadowPSSM.vert
        FragmentShader GLSL150: forester/assets/shaders/trees/TreePostShadowPSSM15.frag

        WorldParameters {
            WorldViewProjectionMatrix
            WorldMatrix
        }

        Defines {
            HARDWARE_SHADOWS : HardwareShadows
            FILTER_MODE : FilterMode
            PCFEDGE : PCFEdge
            DISCARD_ALPHA : AlphaDiscardThreshold
            COLOR_MAP : ColorMap
        }

        RenderState {
            Blend Modulate
        }
    }

    Technique PostShadow{
        VertexShader GLSL100 :   forester/assets/shaders/trees/TreePostShadowPSSM.vert
        FragmentShader GLSL100 : forester/assets/shaders/trees/TreePostShadowPSSM.frag

        WorldParameters {
            WorldViewProjectionMatrix
            WorldMatrix
        }

        Defines {
            HARDWARE_SHADOWS : HardwareShadows
            FILTER_MODE : FilterMode
            PCFEDGE : PCFEdge
            DISCARD_ALPHA : AlphaDiscardThreshold
            COLOR_MAP : ColorMap
        }

        RenderState {
            Blend Modulate
        }
    }

}
