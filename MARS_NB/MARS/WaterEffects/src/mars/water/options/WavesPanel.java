/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mars.water.options;

import com.jme3.math.Vector2f;
import mars.water.WaterGridFilter;
import mars.water.WaterState;

final class WavesPanel extends javax.swing.JPanel {

    private final WavesOptionsPanelController controller;
    private WaterState state;
    private WaterGridFilter filter;

    WavesPanel(WavesOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        while (WaterState.getInstance() == null);
        state = WaterState.getInstance();
        filter = state.getWaterFilter();
        hq.setSelected(filter.isUseHQShoreline());
        ripples.setSelected(filter.isUseRipples());
        scale.setText(String.valueOf(filter.getWaveScale()));
        speed.setText(String.valueOf(filter.getSpeed()));
        amplitude.setText(String.valueOf(filter.getMaxAmplitude()));
        hardness.setText(String.valueOf(filter.getShoreHardness()));
        Vector2f wind = filter.getWindDirection();
        windX.setText(String.valueOf(wind.x));
        windY.setText(String.valueOf(wind.y));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        hq = new javax.swing.JCheckBox();
        ripples = new javax.swing.JCheckBox();
        scale = new javax.swing.JFormattedTextField();
        jLabel1 = new javax.swing.JLabel();
        speed = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        amplitude = new javax.swing.JFormattedTextField();
        jLabel3 = new javax.swing.JLabel();
        hardness = new javax.swing.JFormattedTextField();
        jLabel4 = new javax.swing.JLabel();
        windX = new javax.swing.JFormattedTextField();
        windY = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();

        org.openide.awt.Mnemonics.setLocalizedText(hq, org.openide.util.NbBundle.getMessage(WavesPanel.class, "WavesPanel.hq.text")); // NOI18N
        hq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hqActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(ripples, org.openide.util.NbBundle.getMessage(WavesPanel.class, "WavesPanel.ripples.text")); // NOI18N
        ripples.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ripplesActionPerformed(evt);
            }
        });

        scale.setText(org.openide.util.NbBundle.getMessage(WavesPanel.class, "WavesPanel.scale.text")); // NOI18N
        scale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scaleActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(WavesPanel.class, "WavesPanel.jLabel1.text")); // NOI18N

        speed.setText(org.openide.util.NbBundle.getMessage(WavesPanel.class, "WavesPanel.speed.text")); // NOI18N
        speed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                speedActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(WavesPanel.class, "WavesPanel.jLabel2.text")); // NOI18N

        amplitude.setText(org.openide.util.NbBundle.getMessage(WavesPanel.class, "WavesPanel.amplitude.text")); // NOI18N
        amplitude.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amplitudeActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(WavesPanel.class, "WavesPanel.jLabel3.text")); // NOI18N

        hardness.setText(org.openide.util.NbBundle.getMessage(WavesPanel.class, "WavesPanel.hardness.text")); // NOI18N
        hardness.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hardnessActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(WavesPanel.class, "WavesPanel.jLabel4.text")); // NOI18N

        windX.setText(org.openide.util.NbBundle.getMessage(WavesPanel.class, "WavesPanel.windX.text")); // NOI18N
        windX.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                windXActionPerformed(evt);
            }
        });

        windY.setText(org.openide.util.NbBundle.getMessage(WavesPanel.class, "WavesPanel.windY.text")); // NOI18N
        windY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                windYActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel5, org.openide.util.NbBundle.getMessage(WavesPanel.class, "WavesPanel.jLabel5.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(hq))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(speed, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(scale, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(amplitude, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hardness, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(windX, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(windY, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(ripples))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hq)
                    .addComponent(ripples))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scale, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(speed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(amplitude, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hardness, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(windX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(windY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void windXActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_windXActionPerformed
        Vector2f wind = filter.getWindDirection();
        wind.x = Float.parseFloat(windX.getText());
        filter.setWindDirection(wind);
    }//GEN-LAST:event_windXActionPerformed

    private void windYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_windYActionPerformed
        Vector2f wind = filter.getWindDirection();
        wind.y = Float.parseFloat(windY.getText());
        filter.setWindDirection(wind);
    }//GEN-LAST:event_windYActionPerformed

    private void hqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hqActionPerformed
        filter.setUseHQShoreline(hq.isSelected());
    }//GEN-LAST:event_hqActionPerformed

    private void ripplesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ripplesActionPerformed
        filter.setUseRipples(ripples.isSelected());
    }//GEN-LAST:event_ripplesActionPerformed

    private void scaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scaleActionPerformed
        filter.setWaveScale(Float.parseFloat(scale.getText()));
    }//GEN-LAST:event_scaleActionPerformed

    private void speedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_speedActionPerformed
        filter.setSpeed(Float.parseFloat(speed.getText()));
    }//GEN-LAST:event_speedActionPerformed

    private void amplitudeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amplitudeActionPerformed
        filter.setMaxAmplitude(Float.parseFloat(amplitude.getText()));
    }//GEN-LAST:event_amplitudeActionPerformed

    private void hardnessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hardnessActionPerformed
        filter.setShoreHardness(Float.parseFloat(hardness.getText()));
    }//GEN-LAST:event_hardnessActionPerformed

    void load() {
        // TODO read settings and initialize GUI
        // Example:        
        // someCheckBox.setSelected(Preferences.userNodeForPackage(WavesPanel.class).getBoolean("someFlag", false));
        // or for org.openide.util with API spec. version >= 7.4:
        // someCheckBox.setSelected(NbPreferences.forModule(WavesPanel.class).getBoolean("someFlag", false));
        // or:
        // someTextField.setText(SomeSystemOption.getDefault().getSomeStringProperty());
    }

    void store() {
        // TODO store modified settings
        // Example:
        // Preferences.userNodeForPackage(WavesPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or for org.openide.util with API spec. version >= 7.4:
        // NbPreferences.forModule(WavesPanel.class).putBoolean("someFlag", someCheckBox.isSelected());
        // or:
        // SomeSystemOption.getDefault().setSomeStringProperty(someTextField.getText());
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField amplitude;
    private javax.swing.JFormattedTextField hardness;
    private javax.swing.JCheckBox hq;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JCheckBox ripples;
    private javax.swing.JFormattedTextField scale;
    private javax.swing.JFormattedTextField speed;
    private javax.swing.JFormattedTextField windX;
    private javax.swing.JFormattedTextField windY;
    // End of variables declaration//GEN-END:variables
}
