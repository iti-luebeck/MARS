/*
* Copyright (c) 2015, Institute of Computer Engineering, University of LÃ¼beck
* All rights reserved.
* 
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
* 
* * Redistributions of source code must retain the above copyright notice, this
*   list of conditions and the following disclaimer.
* 
* * Redistributions in binary form must reproduce the above copyright notice,
*   this list of conditions and the following disclaimer in the documentation
*   and/or other materials provided with the distribution.
* 
* * Neither the name of the copyright holder nor the names of its
*   contributors may be used to endorse or promote products derived from
*   this software without specific prior written permission.
* 
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
* FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
package mars.core;

import com.jme3.system.awt.AwtPanel;
import com.jme3.system.awt.AwtPanelsContext;
import com.jme3.system.awt.PaintMode;
import java.awt.Dimension;
import java.beans.PropertyChangeEvent;
import java.util.concurrent.Callable;
import mars.MARS_Main;
import mars.sensors.VideoCamera;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.nodes.NodeEvent;
import org.openide.nodes.NodeListener;
import org.openide.nodes.NodeMemberEvent;
import org.openide.nodes.NodeReorderEvent;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays the camera view of an AUV.
 * 
 * @author Thomas Tosik
 */
@ConvertAsProperties(
        dtd = "-//mars.core//MARSVideoCamera//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "MARSVideoCameraTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_NEVER)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "mars.core.MARSVideoCameraTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_MARSVideoCameraAction",
        preferredID = "MARSVideoCameraTopComponent")
@Messages({
    "CTL_MARSVideoCameraAction=MARSVideoCamera",
    "CTL_MARSVideoCameraTopComponent=MARSVideoCamera Window",
    "HINT_MARSVideoCameraTopComponent=This is a MARSVideoCamera window"
})
public final class MARSVideoCameraTopComponent extends TopComponent implements NodeListener{

    private static AwtPanel vid_panel;
    private VideoCamera lastSelectedVideoCamera;
    private MARS_Main mars;
    
    /**
     *
     */
    public MARSVideoCameraTopComponent() {
        initComponents();
        setName(Bundle.CTL_MARSVideoCameraTopComponent());
        setToolTipText(Bundle.HINT_MARSVideoCameraTopComponent());
    }
    
    /**
     *
     * @param lastSelectedVideoCamera
     * @param mars
     */
    public MARSVideoCameraTopComponent(final VideoCamera lastSelectedVideoCamera, MARS_Main mars) {
        this.lastSelectedVideoCamera = lastSelectedVideoCamera;
        this.mars = mars;
        initComponents();
        setName(Bundle.CTL_MARSVideoCameraTopComponent());
        setToolTipText(Bundle.HINT_MARSVideoCameraTopComponent());
        
        final AwtPanelsContext ctx = (AwtPanelsContext) mars.getContext();
        vid_panel = ctx.createPanel(PaintMode.Accelerated);
        vid_panel.setPreferredSize(new Dimension(256, 256));
        vid_panel.setMinimumSize(new Dimension(256, 256));
        addAWTMapPanel(vid_panel);
        mars.enqueue(new Callable<Void>(){
            public Void call(){
                vid_panel.attachTo(false, lastSelectedVideoCamera.getDebugView());
                return null;
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        VideoPanel = new javax.swing.JPanel();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        VideoPanel.setLayout(new javax.swing.BoxLayout(VideoPanel, javax.swing.BoxLayout.LINE_AXIS));
        add(VideoPanel);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel VideoPanel;
    // End of variables declaration//GEN-END:variables
    /**
     *
     */
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    /**
     *
     */
    @Override
    public void componentClosed() {
        //there should be a list of opened windows so we dont need to clean the tc every time we close it
        //the problem ist that in the tree we create everytime a new tc for the videocamera
        cleanup();
        mars.enqueue(new Callable<Void>(){
            public Void call(){
                vid_panel.cleanup();
                return null;
            }
        });
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    /**
     * 
     * @param map_panel
     */
    private void addAWTMapPanel(AwtPanel map_panel){
        VideoPanel.add(map_panel);
    }
    
    private void cleanup(){
        mars.enqueue(new Callable<Void>(){
            public Void call(){
                lastSelectedVideoCamera.cleanupDebugView();
                return null;
            }
        });
        VideoPanel.removeAll();
    }

    @Override
    public void nodeDestroyed(NodeEvent ne) {
        this.close();
    }

    @Override
    public void childrenReordered(NodeReorderEvent nre) {
    }

    @Override
    public void childrenRemoved(NodeMemberEvent nme) {
    }

    @Override
    public void childrenAdded(NodeMemberEvent nme) {
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
    }
}
