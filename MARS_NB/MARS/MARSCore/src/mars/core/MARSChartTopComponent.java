/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package mars.core;

import com.jme3.math.Vector3f;
import info.monitorenter.gui.chart.Chart2D;
import info.monitorenter.gui.chart.ITrace2D;
import info.monitorenter.gui.chart.controls.LayoutFactory;
import info.monitorenter.gui.chart.traces.Trace2DLtd;
import java.awt.Color;
import java.util.ArrayList;
import mars.auv.AUV;
import mars.events.AUVObjectEvent;
import mars.events.AUVObjectListener;
import mars.events.MARSObjectEvent;
import mars.events.MARSObjectListener;
import mars.sensors.Sensor;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

/**
 * Top component which displays charts/lots of data from auvs/sensors.
 * 
 * @author Thomas Tosik
 */
@ConvertAsProperties(
        dtd = "-//mars.core//MARSChart//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "MARSChartTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "mars.core.MARSChartTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_MARSChartAction",
        preferredID = "MARSChartTopComponent")
@Messages({
    "CTL_MARSChartAction=MARSChart",
    "CTL_MARSChartTopComponent=MARSChart Window",
    "HINT_MARSChartTopComponent=This is a MARSChart window"
})
public final class MARSChartTopComponent extends TopComponent {

    private static final long SLEEP_TIME = 100;
    private static final int VALUES_LIMIT = 50;
    private static final int ITEMS_COUNT = 2;
    
    // Note that dynamic charts need limited amount of values!!! 
    //private ITrace2D trace = new Trace2DLtd(200); 
    //private ITrace2D trace2 = new Trace2DLtd(200); 
    private ArrayList<ITrace2D> traces = new ArrayList<ITrace2D>();
    private static long m_starttime = System.currentTimeMillis();
    private Chart2D charts;
    
    private AUV auv;
    private Sensor sens;

    /**
     *
     */
    public MARSChartTopComponent() {
        initComponents();
        setName(Bundle.CTL_MARSChartTopComponent());
        setToolTipText(Bundle.HINT_MARSChartTopComponent());
    }
    
    /**
     *
     * @param sens
     */
    public MARSChartTopComponent(Sensor sens) {
        this.sens = sens;
        
        initComponents();
        setName(Bundle.CTL_MARSChartTopComponent());
        setToolTipText(Bundle.HINT_MARSChartTopComponent());

        createChart();
    }
    
    /**
     *
     * @param auv
     */
    public MARSChartTopComponent(AUV auv) {
        this.auv = auv;
        
        initComponents();
        setName(Bundle.CTL_MARSChartTopComponent());
        setToolTipText(Bundle.HINT_MARSChartTopComponent());

        createChartAUV();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    /**
     *
     */
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    /**
     *
     */
    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    private void createChart(){  
         // Create a chart:  
        charts = new Chart2D();
        initListenerAUVObject();
    }
    
    private void createChartAUV(){
         // Create a chart:  
        charts = new Chart2D();
        
        // Create an ITrace: 
        ITrace2D trace = new Trace2DLtd(200);
        trace.setColor(Color.RED);
        charts.addTrace(trace);
        traces.add(trace);
                
        LayoutFactory factory = LayoutFactory.getInstance();
        info.monitorenter.gui.chart.views.ChartPanel chartpanel = new info.monitorenter.gui.chart.views.ChartPanel(charts);
        
        add(chartpanel);
	addPropertyChangeListener(chartpanel);
        validate();
        
        initListenerMARSObject();
    }
    
    void initListenerMARSObject(){
        class ComplainingAdListener implements MARSObjectListener{
            @Override public void onNewData( MARSObjectEvent e ) {
                if(e.getMsg() instanceof Float){
                    for (ITrace2D trace : traces) {
                        trace.addPoint(((double) System.currentTimeMillis() - m_starttime), (Float)e.getMsg());
                    }
                }else if(e.getMsg() instanceof Vector3f){
                    Vector3f vec = (Vector3f)e.getMsg();
                    ITrace2D x = traces.get(0);
                    x.addPoint(((double) System.currentTimeMillis() - m_starttime), vec.getX());
                    ITrace2D y = traces.get(1);
                    y.addPoint(((double) System.currentTimeMillis() - m_starttime), vec.getY());
                    ITrace2D z = traces.get(2);
                    z.addPoint(((double) System.currentTimeMillis() - m_starttime), vec.getZ());
                }
            }
        }

        auv.addMARSObjectListener( new ComplainingAdListener() );
    }
    
    void initListenerAUVObject(){
        class ComplainingAdListener implements AUVObjectListener{
            private boolean init = false;
            @Override public void onNewData( AUVObjectEvent e ) {
                
                //we have to init the traces here because we dont know of which type the data is till the first publish
                if(!init){
                    if(e.getMsg() instanceof Float){
                        ITrace2D trace = new Trace2DLtd(200);
                        trace.setColor(Color.RED);
                        charts.addTrace(trace);
                        traces.add(trace);
                    }else if(e.getMsg() instanceof Vector3f){
                        ITrace2D trace = new Trace2DLtd(200);
                        trace.setColor(Color.RED);
                        charts.addTrace(trace);
                        traces.add(trace);
                        ITrace2D trace2 = new Trace2DLtd(200);
                        trace2.setColor(Color.BLUE);
                        charts.addTrace(trace2);
                        traces.add(trace2);
                        ITrace2D trace3 = new Trace2DLtd(200);
                        trace3.setColor(Color.GREEN);
                        charts.addTrace(trace3);
                        traces.add(trace3);
                    }
                    
                    LayoutFactory factory = LayoutFactory.getInstance();
                    info.monitorenter.gui.chart.views.ChartPanel chartpanel = new info.monitorenter.gui.chart.views.ChartPanel(charts);

                    add(chartpanel);
                    addPropertyChangeListener(chartpanel);
                    validate();
                    init = true;
                }
                
                if(e.getMsg() instanceof Float){
                    for (ITrace2D trace : traces) {
                        trace.addPoint(((double) System.currentTimeMillis() - m_starttime), (Float)e.getMsg());
                    }
                }else if(e.getMsg() instanceof Vector3f){
                    Vector3f vec = (Vector3f)e.getMsg();
                    ITrace2D x = traces.get(0);
                    x.addPoint(((double) System.currentTimeMillis() - m_starttime), vec.getX());
                    ITrace2D y = traces.get(1);
                    y.addPoint(((double) System.currentTimeMillis() - m_starttime), vec.getY());
                    ITrace2D z = traces.get(2);
                    z.addPoint(((double) System.currentTimeMillis() - m_starttime), vec.getZ());
                }
            }
        }

        sens.addAUVObjectListener( new ComplainingAdListener() );
    }
}
