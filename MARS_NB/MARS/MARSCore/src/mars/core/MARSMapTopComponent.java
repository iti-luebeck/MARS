/*
* Copyright (c) 2015, Institute of Computer Engineering, University of LÃ¼beck
* All rights reserved.
* 
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
* 
* * Redistributions of source code must retain the above copyright notice, this
*   list of conditions and the following disclaimer.
* 
* * Redistributions in binary form must reproduce the above copyright notice,
*   this list of conditions and the following disclaimer in the documentation
*   and/or other materials provided with the distribution.
* 
* * Neither the name of the copyright holder nor the names of its
*   contributors may be used to endorse or promote products derived from
*   this software without specific prior written permission.
* 
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
* FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
package mars.core;

import com.jme3.system.awt.AwtPanel;
import java.awt.EventQueue;
import mars.MARS_Main;
import mars.gui.dnd.MapStateTransferHandler;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays the minimap.
 * 
 * @author Thomas Tosik
 */
@ConvertAsProperties(
        dtd = "-//mars.core//MARSMap//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "MARSMapTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "explorer", openAtStartup = true, position = 2)
@ActionID(category = "Window", id = "mars.core.MARSMapTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_MARSMapAction",
        preferredID = "MARSMapTopComponent")
@Messages({
    "CTL_MARSMapAction=MARSMap",
    "CTL_MARSMapTopComponent=Map",
    "HINT_MARSMapTopComponent=This is a MARSMap window"
})
public final class MARSMapTopComponent extends TopComponent {

    private MARS_Main mars;
    
    /**
     *
     */
    public MARSMapTopComponent() {
        initComponents();
        setName(Bundle.CTL_MARSMapTopComponent());
        setToolTipText(Bundle.HINT_MARSMapTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenuCamJump = new javax.swing.JPopupMenu();
        jMenuItemCamJump = new javax.swing.JMenuItem();
        MapPanel = new javax.swing.JPanel();

        org.openide.awt.Mnemonics.setLocalizedText(jMenuItemCamJump, org.openide.util.NbBundle.getMessage(MARSMapTopComponent.class, "MARSMapTopComponent.jMenuItemCamJump.text")); // NOI18N
        jMenuItemCamJump.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCamJumpActionPerformed(evt);
            }
        });
        jPopupMenuCamJump.add(jMenuItemCamJump);

        MapPanel.setLayout(new javax.swing.BoxLayout(MapPanel, javax.swing.BoxLayout.LINE_AXIS));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MapPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemCamJumpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCamJumpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItemCamJumpActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel MapPanel;
    private javax.swing.JMenuItem jMenuItemCamJump;
    private javax.swing.JPopupMenu jPopupMenuCamJump;
    // End of variables declaration//GEN-END:variables
    /**
     *
     */
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    /**
     *
     */
    @Override
    public void componentClosed() {
        //this.MapPanel.removeAll();
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    /**
     * 
     * @param map_panel
     */
    public void addAWTMapPanel(AwtPanel map_panel){
        this.MapPanel.add(map_panel);
    }
    
   /**
     * 
     * @param x
     * @param y
     */
    public void showpopupAUV(final int x, final int y){
        final MARSMapTopComponent mmtc = this;
        EventQueue.invokeLater(new Runnable(){
                @Override
                public void run() {
                    jPopupMenuCamJump.show(mmtc,x,y);
                }
            }
        );
    }
    
            /**
     * 
     */
    public void initDND(){
        EventQueue.invokeLater(new Runnable(){
                @Override
                public void run() {
                    MapPanel.setTransferHandler(new MapStateTransferHandler(mars,MapPanel)); 
                }
            }
        );
    }
    
    /**
     * 
     * @param mars
     */
    public void setMARS(MARS_Main mars){
        this.mars = mars;
    }
}
