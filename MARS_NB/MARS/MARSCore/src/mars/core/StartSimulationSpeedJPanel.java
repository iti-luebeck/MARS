/*
* Copyright (c) 2015, Institute of Computer Engineering, University of LÃ¼beck
* All rights reserved.
* 
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
* 
* * Redistributions of source code must retain the above copyright notice, this
*   list of conditions and the following disclaimer.
* 
* * Redistributions in binary form must reproduce the above copyright notice,
*   this list of conditions and the following disclaimer in the documentation
*   and/or other materials provided with the distribution.
* 
* * Neither the name of the copyright holder nor the names of its
*   contributors may be used to endorse or promote products derived from
*   this software without specific prior written permission.
* 
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
* FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
package mars.core;

import java.awt.EventQueue;
import mars.MARS_Main;

/**
 *
 * @author Thomas Tosik <tosik at iti.uni-luebeck.de>
 */
public class StartSimulationSpeedJPanel extends javax.swing.JPanel {

    MARS_Main mars = null;
    
    /**
     * Creates new form StartSimulationJPanel
     */
    public StartSimulationSpeedJPanel() {
        initComponents();
    }
    
    /**
     *
     * @param mars
     */
    public void setMars(MARS_Main mars) {
        this.mars = mars;
    }
        /**
     *
     */
    public void allowSimInteraction(){
        EventQueue.invokeLater(new Runnable(){
                @Override
                public void run() {
                    jButtonFastBackward.setEnabled(true);
                    jButtonFastForward.setEnabled(true);
                    jButtonDefaultSpeed.setEnabled(true);
                }
            }
        );
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jButtonFastBackward = new javax.swing.JButton();
        jButtonDefaultSpeed = new javax.swing.JButton();
        jButtonFastForward = new javax.swing.JButton();

        jToolBar1.setRollover(true);
        jToolBar1.setBorderPainted(false);

        jButtonFastBackward.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mars/gui/resources/icons/Play All 2.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jButtonFastBackward, org.openide.util.NbBundle.getMessage(StartSimulationSpeedJPanel.class, "StartSimulationSpeedJPanel.jButtonFastBackward.text")); // NOI18N
        jButtonFastBackward.setToolTipText(org.openide.util.NbBundle.getMessage(StartSimulationSpeedJPanel.class, "StartSimulationSpeedJPanel.jButtonFastBackward.toolTipText")); // NOI18N
        jButtonFastBackward.setEnabled(false);
        jButtonFastBackward.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonFastBackwardMouseClicked(evt);
            }
        });
        jToolBar1.add(jButtonFastBackward);

        jButtonDefaultSpeed.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mars/gui/resources/icons/Backup Green Button.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jButtonDefaultSpeed, org.openide.util.NbBundle.getMessage(StartSimulationSpeedJPanel.class, "StartSimulationSpeedJPanel.jButtonDefaultSpeed.text")); // NOI18N
        jButtonDefaultSpeed.setToolTipText(org.openide.util.NbBundle.getMessage(StartSimulationSpeedJPanel.class, "StartSimulationSpeedJPanel.jButtonDefaultSpeed.toolTipText")); // NOI18N
        jButtonDefaultSpeed.setEnabled(false);
        jButtonDefaultSpeed.setFocusable(false);
        jButtonDefaultSpeed.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonDefaultSpeed.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonDefaultSpeed.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonDefaultSpeedMouseClicked(evt);
            }
        });
        jToolBar1.add(jButtonDefaultSpeed);

        jButtonFastForward.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mars/gui/resources/icons/Play All.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(jButtonFastForward, org.openide.util.NbBundle.getMessage(StartSimulationSpeedJPanel.class, "StartSimulationSpeedJPanel.jButtonFastForward.text")); // NOI18N
        jButtonFastForward.setToolTipText(org.openide.util.NbBundle.getMessage(StartSimulationSpeedJPanel.class, "StartSimulationSpeedJPanel.jButtonFastForward.toolTipText")); // NOI18N
        jButtonFastForward.setEnabled(false);
        jButtonFastForward.setFocusable(false);
        jButtonFastForward.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButtonFastForward.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButtonFastForward.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonFastForwardMouseClicked(evt);
            }
        });
        jToolBar1.add(jButtonFastForward);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonFastBackwardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonFastBackwardMouseClicked
        if(jButtonFastForward.isEnabled()){
            mars.speedDownSimulation();
        }
    }//GEN-LAST:event_jButtonFastBackwardMouseClicked

    private void jButtonDefaultSpeedMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonDefaultSpeedMouseClicked
       if (jButtonDefaultSpeed.isEnabled()){            
           mars.defaultSpeedSimulation();         
       } 
    }//GEN-LAST:event_jButtonDefaultSpeedMouseClicked

    private void jButtonFastForwardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonFastForwardMouseClicked
        if(jButtonFastForward.isEnabled()){
            mars.speedUpSimulation();
        }
    }//GEN-LAST:event_jButtonFastForwardMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDefaultSpeed;
    private javax.swing.JButton jButtonFastBackward;
    private javax.swing.JButton jButtonFastForward;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
}
