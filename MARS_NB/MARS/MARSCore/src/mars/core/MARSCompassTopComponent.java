/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package mars.core;

import com.jme3.math.Vector3f;
import info.monitorenter.gui.chart.ITrace2D;
import java.awt.Color;
import java.awt.Font;
import java.util.ArrayList;
import mars.ChartValue;
import mars.sensors.Compass;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CompassPlot;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//mars.core//MARSCompass//EN",
        autostore = false)
@TopComponent.Description(
        preferredID = "MARSCompassTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "mars.core.MARSCompassTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_MARSCompassAction",
        preferredID = "MARSCompassTopComponent")
@Messages({
    "CTL_MARSCompassAction=MARSCompass",
    "CTL_MARSCompassTopComponent=MARSCompass Window",
    "HINT_MARSCompassTopComponent=This is a MARSCompass window"
})
public final class MARSCompassTopComponent extends TopComponent {
    
    private static long m_starttime = System.currentTimeMillis();
    private Compass lastSelectedCompass;
    private DefaultValueDataset compassDataX = new DefaultValueDataset(new Double(0.0));
    private DefaultValueDataset compassDataY = new DefaultValueDataset(new Double(0.0));
    private DefaultValueDataset compassDataZ = new DefaultValueDataset(new Double(0.0));
    
    public MARSCompassTopComponent() {
        initComponents();
        setName(Bundle.CTL_MARSCompassTopComponent());
        setToolTipText(Bundle.HINT_MARSCompassTopComponent());
        createJFreeChart();
    }
    
    public MARSCompassTopComponent(Compass lastSelectedCompass) {
        this.lastSelectedCompass = lastSelectedCompass;
        initComponents();
        setName(Bundle.CTL_MARSCompassTopComponent());
        setToolTipText(Bundle.HINT_MARSCompassTopComponent());
        createJFreeChart();
        new ChartGenerator(compassDataX,compassDataY,compassDataZ,lastSelectedCompass).start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    private void createJFreeChart() {

        CompassPlot compassPlot = new CompassPlot(compassDataX);
        
        compassPlot.addDataset(compassDataY);
        compassPlot.addDataset(compassDataZ);
        compassPlot.setSeriesNeedle(0, 2);
        compassPlot.setSeriesNeedle(1, 2);
        compassPlot.setSeriesNeedle(2, 2);
        compassPlot.setSeriesPaint(0, Color.blue);
        compassPlot.setSeriesOutlinePaint(0, Color.blue);
        compassPlot.setSeriesPaint(1, Color.red);
        compassPlot.setSeriesOutlinePaint(1, Color.red);
        compassPlot.setSeriesPaint(2, Color.green);
        compassPlot.setSeriesOutlinePaint(2, Color.green);
            
        final JFreeChart chart = new JFreeChart(
            "Depth",
            new Font("Verdana", Font.BOLD, 17),
            compassPlot,
            true
        );
        
        ChartPanel chartPanel = new ChartPanel(chart);
        // default size
        chartPanel.setPreferredSize(new java.awt.Dimension(1024, 512));

        add(chartPanel);
        validate();
    }
    
    private static class ChartGenerator extends Thread {
 
        private DefaultValueDataset compassDataX = new DefaultValueDataset(new Double(0.0));
        private DefaultValueDataset compassDataY = new DefaultValueDataset(new Double(0.0));
        private DefaultValueDataset compassDataZ = new DefaultValueDataset(new Double(0.0));
        private Compass lastSelectedCompass;
        
        public void run() {
            while (true) {
                try {
                    compassDataX.setValue(lastSelectedCompass.getPitchDegree());
                    compassDataY.setValue(lastSelectedCompass.getYawDegree());
                    compassDataZ.setValue(lastSelectedCompass.getRollDegree());
                    Thread.sleep(lastSelectedCompass.getRos_publish_rate());
                } catch (Exception e) {
                    e.printStackTrace(System.err);
                }
            }
        }

        private ChartGenerator(DefaultValueDataset compassDataX, DefaultValueDataset compassDataY, DefaultValueDataset compassDataZ, Compass lastSelectedCompass) {
            this.compassDataX = compassDataX;
            this.compassDataY = compassDataY;
            this.compassDataZ = compassDataZ;
            this.lastSelectedCompass = lastSelectedCompass;
        }
    }
}
